%% Analysis of cal_nsf_20140812 panel returns at 1064 nm
% Panels returns from stationary scans are summarized in ascii files after
% cleanning up most noise points. This script plots out return ranges and 
% intensities for each range from ascii files. 
% Then next step is to further clean up outliers in the panel returns by 
% manually inspecting panel returns at each range and each wavelength. Record 
% shot numbers of good shots and the criteria of the outlier detection for next
% step of statistics calculation of panel returns.
% Presumably, this step only needs to be done once. The records of good shots 
% can be used again if the panel scans are reprocessed and the statistics needs 
% update. 

indir = '/projectnb/echidna/lidar/DWEL_Processing/DWEL_TestCal/cal-oz-uml-hf-20140425-0503/cal-oz-uml-hf-20140425-0503-panel-return-summary'; 

infiles = { ...
'cal_oz_20140425_0_5_1064_cube_bsfix_pxc_update_ptcl_points_panel_returns.txt' ...
'cal_oz_20140425_10_1064_cube_bsfix_pxc_update_ptcl_points_panel_returns.txt' ...
'cal_oz_20140425_11_1064_cube_bsfix_pxc_update_ptcl_points_panel_returns.txt' ...
'cal_oz_20140425_12_1064_cube_bsfix_pxc_update_ptcl_points_panel_returns.txt' ...
'cal_oz_20140425_13_1064_cube_bsfix_pxc_update_ptcl_points_panel_returns.txt' ...
'cal_oz_20140425_14_1064_cube_bsfix_pxc_update_ptcl_points_panel_returns.txt' ...
'cal_oz_20140425_15_1064_cube_bsfix_pxc_update_ptcl_points_panel_returns.txt' ...
'cal_oz_20140425_1_1064_cube_bsfix_pxc_update_ptcl_points_panel_returns.txt' ...
'cal_oz_20140425_1_5_1064_cube_bsfix_pxc_update_ptcl_points_panel_returns.txt' ...
'cal_oz_20140425_20_1064_cube_bsfix_pxc_update_ptcl_points_panel_returns.txt' ...
'cal_oz_20140425_25_1064_cube_bsfix_pxc_update_ptcl_points_panel_returns.txt' ...
'cal_oz_20140425_2_1064_cube_bsfix_pxc_update_ptcl_points_panel_returns.txt' ...
'cal_oz_20140425_2_5_1064_cube_bsfix_pxc_update_ptcl_points_panel_returns.txt' ...
'cal_oz_20140425_30_1064_cube_bsfix_pxc_update_ptcl_points_panel_returns.txt' ...
'cal_oz_20140425_35_1064_cube_bsfix_pxc_update_ptcl_points_panel_returns.txt' ...
'cal_oz_20140425_3_1064_cube_bsfix_pxc_update_ptcl_points_panel_returns.txt' ...
'cal_oz_20140425_3_5_1064_cube_bsfix_pxc_update_ptcl_points_panel_returns.txt' ...
'cal_oz_20140425_40_1064_cube_bsfix_pxc_update_ptcl_points_panel_returns.txt' ...
'cal_oz_20140425_4_1064_cube_bsfix_pxc_update_ptcl_points_panel_returns.txt' ...
'cal_oz_20140425_4_5_1064_cube_bsfix_pxc_update_ptcl_points_panel_returns.txt' ...
'cal_oz_20140425_50_1064_cube_bsfix_pxc_update_ptcl_points_panel_returns.txt' ...
'cal_oz_20140425_5_1064_cube_bsfix_pxc_update_ptcl_points_panel_returns.txt' ...
'cal_oz_20140425_5_5_1064_cube_bsfix_pxc_update_ptcl_points_panel_returns.txt' ...
'cal_oz_20140425_60_1064_cube_bsfix_pxc_update_ptcl_points_panel_returns.txt' ...
'cal_oz_20140425_6_1064_cube_bsfix_pxc_update_ptcl_points_panel_returns.txt' ...
'cal_oz_20140425_6_5_1064_cube_bsfix_pxc_update_ptcl_points_panel_returns.txt' ...
'cal_oz_20140425_70_1064_cube_bsfix_pxc_update_ptcl_points_panel_returns.txt' ...
'cal_oz_20140425_7_1064_cube_bsfix_pxc_update_ptcl_points_panel_returns.txt' ...
'cal_oz_20140425_7_5_1064_cube_bsfix_pxc_update_ptcl_points_panel_returns.txt' ...
'cal_oz_20140425_8_1064_cube_bsfix_pxc_update_ptcl_points_panel_returns.txt' ...
'cal_oz_20140425_8_5_1064_cube_bsfix_pxc_update_ptcl_points_panel_returns.txt' ...
'cal_oz_20140425_9_1064_cube_bsfix_pxc_update_ptcl_points_panel_returns.txt' ...
'cal_oz_20140425_9_5_1064_cube_bsfix_pxc_update_ptcl_points_panel_returns.txt' ...
};

fnum = 33; % fnum: 1~33

% for fnum=1:33
% get the range from the file name
tmpstr = strsplit(infiles{fnum}, '_');
panelrange = str2num(tmpstr{4});
fprintf('panel at %f.%f m\n', panelrange, str2num(tmpstr{5}));

if panelrange < 5.0 
    % do not analyze panels closer than 5.0 because the panel returns can't
    % be reliably extracted due to possible mixing with wire signal
    %return
    % continue
end

% read the data of panel returns
filename = fullfile(indir, infiles{fnum});
fid = fopen(filename, 'r');
data = textscan(fid, repmat('%f', 1, 9), 'HeaderLines', 1, 'Delimiter', ',');
fclose(fid);

if isempty(data{2})
    return;
    %continue;
end

data = cell2mat(data);

fprintf('Number of saturated shots: %d\n', sum(data(:,9)));
fprintf('First 10 shots, line index:\n');
data(1:10,1)

x = 1:size(data, 1);
% plot intensity and range
figure('Name', ['1064 nm at ', num2str(panelrange), 'm']);
[hax, h1, h2] = plotyy(data(:,1), data(:,4), data(:,1), data(:, 2));
set(h1, 'linestyle', 'none', 'marker', '.', 'color', 'r');
set(hax(1), 'ycolor', 'r')
set(h2, 'linestyle', 'none', 'marker', '.', 'color', 'b');
set(hax(2), 'ycolor', 'b')
title(['Extracted points of panel returns from 1064 nm at ', num2str(panelrange), ...
       'm']);
xlabel('Laser shot sequence number');
ylabel(hax(1), 'range');
ylabel(hax(2), 'intensity after pre-processing, not scaled');
% plot saturation mask
tmpylim = ylim(hax(1));
tmpy = (tmpylim(2)-tmpylim(1))*data(:, 9)+tmpylim(1)*ones(size(data(:,9)));
hold on;
plot(hax(1), data(:,1), tmpy, '-og');
saveas(gcf, [filename(1:end-4), '.fig']);
export_fig([filename(1:end-4), '.png'], '-png','-r300','-painters', gcf);
%close(gcf);
%end
